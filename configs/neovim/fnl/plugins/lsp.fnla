(local lsp_keymaps
       (lambda []
         (local map _G.vim.keymap.set)
         (map :n :gr "<cmd>Telescope lsp_references<cr>")
         (map :n :gd "<cmd>Telescope lsp_definitions<cr>")
         (map :n :gD "<cmd>lua vim.lsp.buf.implementation()<cr>")
         (map :n :<leader>lD "<cmd>lua vim.diagnostic.open_float()<cr>")
         (map :n :<leader>lf "<cmd>lua require('conform').format()<cr>")
         (map :n :<leader>q "<cmd>Telescope diagnostics<cr>")
         (map :n :<leader>la "<cmd>lua vim.lsp.buf.code_action()<cr>")
         (map :n :<leader>lr "<cmd>lua vim.lsp.buf.rename()<cr>")
         (map :n :<leader>lk "<cmd>lua vim.diagnostic.goto_prev()<cr>")
         (map :n :<leader>lj "<cmd>lua vim.diagnostic.goto_next()<cr>")))

{1 :VonHeikemen/lsp-zero.nvim
 :branch :v3.x
 :event :BufEnter
 :dependencies [:neovim/nvim-lspconfig
                {1 :williamboman/mason.nvim
                 :build (fn []
                          (pcall _G.vim.cmd :MasonUpdate))}
                :williamboman/mason-lspconfig.nvim
                :nvim-telescope/telescope.nvim
                ; Completion
                :hrsh7th/nvim-cmp
                :hrsh7th/cmp-nvim-lsp
                :L3MON4D3/LuaSnip
                :onsails/lspkind.nvim
                ; Formatting
                :stevearc/conform.nvim]
 :config (lambda []
           (local lsp ((. (require :lsp-zero) :preset) {}))
           (lsp.on_attach (lambda [_ bufnr]
                            (lsp.default_keymaps {:buffer bufnr})
                            (lsp_keymaps)))
           ((. (require :mason) :setup) {})
           ((. (require :mason-lspconfig) :setup) {:ensure_installed []
                                                   :handlers [lsp.default_setup]})
           ((. (require :conform) :setup) {:formatters_by_ft {:lua [:stylua]
                                                              :javascript [{:prettierd :prettier}]
                                                              :javascriptreact [{:prettierd :prettier}]
                                                              :typescript [{:prettierd :prettier}]
                                                              :typescriptreact [{:prettierd :prettier}]
                                                              :go [{:gofumpt :gofmt}]
                                                              :json [:jq]
                                                              :fennel [:fnlfmt]
                                                              :haskell [{:ormolu :formolu}]}
                                           :format_on_save {:timeout_ms 500
                                                            :lsp_fallback true}})
           ((. (require :lspconfig) :lua_ls.setup) (lsp.nvim_lua_ls))
           (local lspconfig (require :lspconfig))
           ((. (require :lspconfig.configs) :fennel_language_server) {:default_config {:cmd [:/Users/nikolai/.local/share/nvim/mason/bin/fennel-language-server]
                                                                                       :filetypes [:fennel]
                                                                                       :single_file_support true
                                                                                       :root_dir (lspconfig.util.root_pattern :fnl)
                                                                                       :settings {:fennel {:workspace {:library (_G.vim.api.nvim_list_runtime_paths)}
                                                                                                           :diagnostics {:globals [:vim]}}}}})
           (local cmp (require :cmp))
           (local cmp_action ((. (require :lsp-zero) :cmp_action)))
           (require :lspkind)
           (cmp.setup {:mapping {:<CR> (cmp.mapping.confirm {:select true})
                                 :<C-Space> (cmp.mapping.complete)
                                 :<C-j> (cmp.mapping.select_next_item)
                                 :<C-k> (cmp.mapping.select_prev_item)
                                 :<C-f> (cmp_action.luasnip_jump_forward)
                                 :<C-b> (cmp_action.luasnip_jump_backward)}
                       :window {:completion {:winhighlight "Normal:Pmenu,FloatBorder:Pmenu,Search:None"
                                             :col_offset -3
                                             :side_padding 0}}
                       :formatting {:fields [:kind :abbr :menu]
                                    :format (fn [entry vim_item]
                                              (local kind
                                                     (((. (require :lspkind)
                                                          :cmp_foramt) {:mode :symbol_text
                                                                                                                                                     :maxwidth 50}) entry
                                                                                                                                                                                                                                                                                                                                            vim_item))
                                              (local strings
                                                     (_G.vim.split kind.kind
                                                                   "%s"
                                                                   {:trimempty true})))}})
           (lsp.setup))}

; return {
; 	{
; 		"VonHeikemen/lsp-zero.nvim",
; 		branch = "v3.x",
; 		event = "BufEnter",
; 		dependencies = {
; 			"neovim/nvim-lspconfig",
; 			{
; 				"williamboman/mason.nvim",
; 				build = function()
; 					pcall(vim.cmd, "MasonUpdate")
; 				end,
; 			},
; 			"williamboman/mason-lspconfig.nvim",
; 			"nvim-telescope/telescope.nvim",
;
; 			-- Completion
; 			"hrsh7th/nvim-cmp",
; 			"hrsh7th/cmp-nvim-lsp",
; 			"L3MON4D3/LuaSnip",
; 			"onsails/lspkind.nvim",
;
; 			-- Formatting
; 			"stevearc/conform.nvim",
; 		},
; 		config = function()
; 			local lsp = require("lsp-zero").preset({})
;
; 			lsp.on_attach(function(_, bufnr)
; 				lsp.default_keymaps({
; 					buffer = bufnr,
; 				})
;
; 				vim.keymap.set("n", "gr", "<cmd>Telescope lsp_references<cr>")
;
; 				vim.keymap.set("n", "gd", "<cmd>Telescope lsp_definitions<cr>")
;
; 				vim.keymap.set(
; 					"n",
; 					"gD",
; 					"<cmd>lua vim.lsp.buf.implementation()<cr>"
; 				)
;
; 				vim.keymap.set(
; 					"n",
; 					"<leader>lD",
; 					"<cmd>lua vim.diagnostic.open_float()<cr>"
; 				)
;
; 				vim.keymap.set(
; 					"n",
; 					"<leader>lf",
; 					'<cmd>lua require("conform").format()<cr>'
; 				)
;
; 				vim.keymap.set("n", "<leader>q", "<cmd>Telescope diagnostics<cr>")
;
; 				vim.keymap.set("n", "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>")
;
; 				vim.keymap.set("n", "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>")
;
; 				vim.keymap.set(
; 					"n",
; 					"<leader>lk",
; 					"<cmd>lua vim.diagnostic.goto_prev()<cr>"
; 				)
;
; 				vim.keymap.set(
; 					"n",
; 					"<leader>lj",
; 					"<cmd>lua vim.diagnostic.goto_next()<cr>"
; 				)
; 			end)
;
; 			require("mason").setup({})
; 			require("mason-lspconfig").setup({
; 				-- Replace the language servers listed here
; 				-- with the ones you want to install
; 				ensure_installed = {},
; 				handlers = {
; 					lsp.default_setup,
; 				},
; 			})
;
; 			require("conform").setup({
; 				formatters_by_ft = {
; 					lua = { "stylua" },
; 					javascript = { { "prettierd", "prettier" } },
; 					javascriptreact = { { "prettierd", "prettier" } },
; 					typescript = { { "prettierd", "prettier" } },
; 					typescriptreact = { { "prettierd", "prettier" } },
; 					go = { { "gofumpt", "gofmt" } },
; 					json = { "jq" },
; 					fennel = { "fnlfmt" },
; 					haskell = { { "ormolu", "formolu" } },
; 				},
; 				format_on_save = {
; 					timeout_ms = 500,
; 					lsp_fallback = true,
; 				},
; 			})
;
; 			-- (Optional) Configure lua language server for neovim
; 			require("lspconfig").lua_ls.setup(lsp.nvim_lua_ls())
;
; 			local lspconfig = require("lspconfig")
; 			require("lspconfig.configs").fennel_language_server = {
; 				default_config = {
; 					-- replace it with true path
; 					cmd = { "/Users/nikolai/.local/share/nvim/mason/bin/fennel-language-server" },
; 					filetypes = { "fennel" },
; 					single_file_support = true,
; 					-- source code resides in directory `fnl/`
; 					root_dir = lspconfig.util.root_pattern("fnl"),
; 					settings = {
; 						fennel = {
; 							workspace = {
; 								-- If you are using hotpot.nvim or aniseed,
; 								-- make the server aware of neovim runtime files.
; 								library = vim.api.nvim_list_runtime_paths(),
; 							},
; 							diagnostics = {
; 								globals = { "vim" },
; 							},
; 						},
; 					},
; 				},
; 			}
; 			-- lspconfig.fennel_language_server.setup({})
;
; 			-- You need to setup `cmp` after lsp-zero
; 			local cmp = require("cmp")
; 			local cmp_action = require("lsp-zero").cmp_action()
; 			require("lspkind")
;
; 			cmp.setup({
; 				mapping = {
; 					-- `Enter` key to confirm completion
; 					["<CR>"] = cmp.mapping.confirm({ select = true }),
;
; 					-- Ctrl+Space to trigger completion menu
; 					["<C-Space>"] = cmp.mapping.complete(),
;
; 					["<C-j>"] = cmp.mapping.select_next_item(),
; 					["<C-k>"] = cmp.mapping.select_prev_item(),
;
; 					-- Navigate between snippet placeholder
; 					["<C-f>"] = cmp_action.luasnip_jump_forward(),
; 					["<C-b>"] = cmp_action.luasnip_jump_backward(),
; 				},
; 				window = {
; 					completion = {
; 						winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,Search:None",
; 						col_offset = -3,
; 						side_padding = 0,
; 					},
; 				},
; 				formatting = {
; 					fields = { "kind", "abbr", "menu" },
; 					format = function(entry, vim_item)
; 						local kind =
; 							require("lspkind").cmp_format({ mode = "symbol_text", maxwidth = 50 })(entry, vim_item)
; 						local strings = vim.split(kind.kind, "%s", { trimempty = true })
; 						kind.kind = " " .. (strings[1] or "") .. " "
; 						kind.menu = "    (" .. (strings[2] or "") .. ")"
;
; 						return kind
; 					end,
; 				},
; 			})
;
; 			lsp.setup()
; 		end,
; 	},
; }

